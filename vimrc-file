set nocompatible              " required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

"let Vundle manage Vundle, required
" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)
Plugin 'gmarik/Vundle.vim'
"Auto indentation for python
Plugin 'vim-scripts/indentpython.vim'

"For better code folding
Plugin 'tmhedberg/SimpylFold'
"Auto complete
Bundle 'Valloric/YouCompleteMe'
"Check syntax on save of each file
Plugin 'scrooloose/syntastic'
"Pep-8 checking
Plugin 'nvie/vim-flake8'
"Plugin 'jnurmine/Zenburn'

"Solarized color scheme
Plugin 'altercation/vim-colors-solarized'
"Nerd tree 
Plugin 'scrooloose/nerdtree'
"Nerd tree for tabs
Plugin 'jistr/vim-nerdtree-tabs'
"For searching
Plugin 'kien/ctrlp.vim'
"for git opeartions in vim
Plugin 'tpope/vim-fugitive'
"Status bar
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'hynek/vim-python-pep8-indent'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"Specifying how to split windows

set splitbelow
set splitright

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"Enable folding
set foldmethod=indent
set foldlevel=99

"Enable folding with the spacebar
nnoremap <space> za

"To see doc string of folded code
let g:SimpylFold_docstring_preview=1

"To add pep-8 indentation
"au BufNewFile,BufRead *.py
 set tabstop=4
 set softtabstop=4
 set shiftwidth=4
 set textwidth=79
 set expandtab
 set autoindent
 set fileformat=unix

"For full stack development
"au BufNewFile,BufRead *.js, *.html, *.css
"   \ set tabstop=2
"    \ set softtabstop=2
"   \ set shiftwidth=2

""Flagging extra spaces
"au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

"Setting encoding of file to utf-8
set encoding=utf-8

""Customizations for auto complete

"To remove auto complete window when done
let g:ycm_autoclose_preview_window_after_completion=1

"Shortcut to go to definiation
map <C-g>  :YcmCompleter GoToDefinitionElseDeclaration<CR>


"python with virtualenv support
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF

"Syntatic syntax
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 2
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"Code look pretty
let python_highlight_all=1
syntax on

"To toggle between color schemes
call togglebg#map("<F5>")


let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

let g:nerdtree_tabs_open_on_console_startup=1
let g:nerdtree_tabs_open_on_new_tab=1

"Numbering lines
set nu

"setting for ctrlp search
let g:ctrlp_map ='<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_user_command = 'find %s -type f'


set clipboard=unnamed
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

map <S-E> :NERDTreeToggle<CR>


let g:solarized_termcolors=256
let g:solarized_termcolors= 16 | 256 
let g:solarized_termtrans = 0 | 1 
let g:solarized_degrade = 0 | 1 
let g:solarized_bold = 1 | 0 
let g:solarized_underline = 1 | 0 
let g:solarized_italic = 1 | 0 
let g:solarized_contrast = "normal"| "high" or "low" 
let g:solarized_visibility= "normal"| "high" or "low"
syntax enable
set background=dark
colorscheme solarized

"For powerline status
set rtp+=$HOME/.local/lib/python2.7/site-packages/powerline/bindings/vim/

" Always show statusline
set laststatus=2

"Use 256 colours (Use this setting only if your terminal supports 256
" colours)
set t_Co=256

let g:flake8_show_in_gutter=1
let g:flake8_show_quickfix=1
let g:flake8_show_in_file=1
autocmd FileType python map <buffer> <F3> :call Flake8()<CR>

"For opening a new tab
imap ,t <Esc>:tabnew<CR>

"Tab navigation
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabnext<CR>
nnoremap tk  :tabprev<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnext<Space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>
"Alternatively use
nnoremap th :tabnext<CR>
nnoremap tl :tabprev<CR>
nnoremap tn :tabnew<CR>

